
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './schema';

const SUPABASE_URL = "https://uvbfgvrgvgputsranakq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV2YmZndnJndmdwdXRzcmFuYWtxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0NDk4NTQsImV4cCI6MjA2MDAyNTg1NH0.Xx_vZ0YuzGoqMwSAGqtYMF15aaBqmrxuRsKUDetKu2w";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
    flowType: 'implicit'
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web/2.49.4'
    },
    fetch: (url, options) => {
      console.log('Supabase request:', url);
      console.log('Request method:', options?.method || 'GET');
      
      // Set timeout for fetch requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
      
      const fetchOptions = {
        ...options,
        signal: controller.signal
      };
      
      return fetch(url, fetchOptions)
        .then(response => {
          clearTimeout(timeoutId);
          console.log('Supabase response status:', response.status);
          return response;
        })
        .catch(err => {
          clearTimeout(timeoutId);
          console.error('Supabase fetch error:', err);
          throw err;
        });
    }
  }
});

// Add a helper function to check connection
export const checkSupabaseConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    const startTime = Date.now();
    // Try to fetch a simple table
    const { error } = await supabase.from('profiles').select('id').limit(1);
    const endTime = Date.now();
    
    if (error) {
      console.error('Supabase connection test failed:', error);
      return { success: false, error, latency: endTime - startTime };
    }
    
    console.log('Supabase connection test successful, latency:', endTime - startTime, 'ms');
    return { success: true, latency: endTime - startTime };
  } catch (error) {
    console.error('Supabase connection test error:', error);
    return { success: false, error };
  }
};

// Test connection on script load
checkSupabaseConnection().then(result => {
  if (!result.success) {
    console.warn('Initial Supabase connection failed. Authentication features may not work.');
  }
});
